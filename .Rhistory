library(coopbreed)
Paths = 3 # number of Paths to simulate
T = 30 # number of generations to simulate
P = 10 # number of patches
MutStep = 0.001 # mutation step
M = seq(1,9,2) # number of mates
K = 10 # number of offspring
c = c(0.75, 1, 1.25) # parameter
k = c(0.5, 1) # parameter
param_combi <- as.data.frame(matrix(0, nrow = length(M) * length(K) * length(c) * length(k), ncol = 4))
colnames(param_combi) <- c("n_mates", "n_off", "par_c", "par_k")
count = 0
for(i in 1:length(M)){
for(ii in 1:length(K)){
for(iii in 1:length(c)){
for(iiii in 1:length(k)){
count <- count + 1
par_names[i,ii,iii,iiii] <- names(results)[count]
param_combi[count,1] <- M[i]
param_combi[count,2] <- K[ii]
param_combi[count,3] <- c[iii]
param_combi[count,4] <- k[iiii]
}
}
}
}
param_combi <- as.data.frame(matrix(0, nrow = length(M) * length(K) * length(c) * length(k), ncol = 4))
colnames(param_combi) <- c("n_mates", "n_off", "par_c", "par_k")
count = 0
for(i in 1:length(M)){
for(ii in 1:length(K)){
for(iii in 1:length(c)){
for(iiii in 1:length(k)){
count <- count + 1
param_combi[count,1] <- M[i]
param_combi[count,2] <- K[ii]
param_combi[count,3] <- c[iii]
param_combi[count,4] <- k[iiii]
}
}
}
}
param_combi
Paths = 3 # number of Paths to simulate
T = 30 # number of generations to simulate
P = 10 # number of patches
MutStep = 0.001 # mutation step
M = 2#seq(1,9,2) # number of mates
K = 10 # number of offspring
c = 1 #c(0.75, 1, 1.25) # parameter
k = 1 #c(0.5, 1) # parameter
system.time({
test1 <- coopbreed::coopbreed2(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
test1
Paths = 3 # number of Paths to simulate
T = 30 # number of generations to simulate
P = 10 # number of patches
MutStep = 0.001 # mutation step
M = seq(1,9,2) # number of mates
K = 10 # number of offspring
c = c(0.75, 1, 1.25) # parameter
k = c(0.5, 1) # parameter
system.time({
test1 <- coopbreed::coopbreed2(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
test1
library(coopbreed)
Paths = 3 # number of Paths to simulate
T = 30 # number of generations to simulate
P = 10 # number of patches
MutStep = 0.001 # mutation step
M = 2 # seq(1,9,2) # number of mates
K = 10 # number of offspring
c = 1.5# c(0.75, 1, 1.25) # parameter
k = 1 # c(0.5, 1) # parameter
system.time({
test1 <- coopbreed::coopbreed(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
test1
library(coopbreed)
coopbreed::coopbreed()
system.time({
test1 <- coopbreed::coopbreed(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
library(coopbreed)
system.time({
test1 <- coopbreed::coopbreed(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
library(coopbreed)
system.time({
test1 <- coopbreed::coopbreed(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
param_combi <- as.data.frame(matrix(0,
nrow = length(M) * length(K) * length(c) * length(k), ncol = 8))
colnames(param_combi) <- c("paths", "n_gener","n_patches", "MutStep", "n_mates", "n_off", "par_c", "par_k")
param_combi <- as.data.frame(matrix(0,
nrow = length(M) * length(K) * length(c) * length(k), ncol = 8))
colnames(param_combi) <- c("paths", "n_gener","n_patches", "MutStep", "n_mates", "n_off", "par_c", "par_k")
count = 0
for(i in 1:length(M)){
for(ii in 1:length(K)){
for(iii in 1:length(c)){
for(iiii in 1:length(k)){
count <- count + 1
param_combi[count,1] <- Paths
param_combi[count,2] <- T
param_combi[count,3] <- P
param_combi[count,4] <- MutStep
param_combi[count,5] <- M[i]
param_combi[count,6] <- K[ii]
param_combi[count,7] <- c[iii]
param_combi[count,8] <- k[iiii]
}
}
}
}
param_combi
Paths = 3 # number of Paths to simulate
T = 30 # number of generations to simulate
P = 10 # number of patches
MutStep = 0.001 # mutation step
M = seq(1,9,2) # number of mates
K = 10 # number of offspring
c = c(0.75, 1, 1.25) # parameter
k = c(0.5, 1) # parameter
param_combi <- as.data.frame(matrix(0,
nrow = length(M) * length(K) * length(c) * length(k), ncol = 8))
colnames(param_combi) <- c("paths", "n_gener","n_patches", "MutStep", "n_mates", "n_off", "par_c", "par_k")
count = 0
for(i in 1:length(M)){
for(ii in 1:length(K)){
for(iii in 1:length(c)){
for(iiii in 1:length(k)){
count <- count + 1
param_combi[count,1] <- Paths
param_combi[count,2] <- T
param_combi[count,3] <- P
param_combi[count,4] <- MutStep
param_combi[count,5] <- M[i]
param_combi[count,6] <- K[ii]
param_combi[count,7] <- c[iii]
param_combi[count,8] <- k[iiii]
}
}
}
}
param_combi
ptm <- proc.time()
cores <- parallel::detectCores() - 1
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
test1 <- foreach::foreach(i = 1:nrow(param_combi)) %dopar%{
coopbreed::coopbreed(paths = param_combi[i,1], n_gener =  param_combi[i,2], n_patches =  param_combi[i,3],
MutStep = param_combi[i,4], n_mates = param_combi[i,5],
n_off = param_combi[i,6], par_c= param_combi[i,7], par_k= param_combi[i,8])
}
library(foreach)
library(doParallel)
library(Rcpp)
library(RcppArmadillo)
library(RcppProgress)
library(devtools)
ptm <- proc.time()
cores <- parallel::detectCores() - 1
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
parallel::stopCluster(cl = cl)
proc.time() - ptm
# start timing
ptm <- proc.time()
# use all cores available, except 1
cores <- parallel::detectCores() - 1
# set up cluster
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
# start parallelised for-loop
test1 <- foreach::foreach(i = 1:nrow(param_combi)) %dopar%{
coopbreed::coopbreed(paths = param_combi[i,1], n_gener =  param_combi[i,2], n_patches =  param_combi[i,3],
MutStep = param_combi[i,4], n_mates = param_combi[i,5],
n_off = param_combi[i,6], par_c= param_combi[i,7], par_k= param_combi[i,8])
}
# stop cluster, free memory form workers
parallel::stopCluster(cl = cl)
# stop timing
proc.time() - ptm
test1
system.time({
test1 <- coopbreed::coopbreed(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
system.time({
test1 <- coopbreed::coopbreed2(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
system.time({
test1 <- coopbreed::coopbreed2(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
Paths = 3 # number of Paths to simulate
T = 300 # number of generations to simulate
P = 100 # number of patches
MutStep = 0.001 # mutation step
M = seq(1,9,2) # number of mates
K = 100 # number of offspring
c = c(0.75, 1, 1.25) # parameter
k = c(0.5, 1) # parameter
param_combi <- as.data.frame(matrix(0,
nrow = length(M) * length(K) * length(c) * length(k), ncol = 8))
colnames(param_combi) <- c("paths", "n_gener","n_patches", "MutStep", "n_mates", "n_off", "par_c", "par_k")
count = 0
for(i in 1:length(M)){
for(ii in 1:length(K)){
for(iii in 1:length(c)){
for(iiii in 1:length(k)){
count <- count + 1
param_combi[count,1] <- Paths
param_combi[count,2] <- T
param_combi[count,3] <- P
param_combi[count,4] <- MutStep
param_combi[count,5] <- M[i]
param_combi[count,6] <- K[ii]
param_combi[count,7] <- c[iii]
param_combi[count,8] <- k[iiii]
}
}
}
}
param_combi
# start timing
ptm <- proc.time()
# use all cores available, except 1
cores <- parallel::detectCores() - 1
# set up cluster
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
# start parallelised for-loop
test1 <- foreach::foreach(i = 1:nrow(param_combi)) %dopar%{
coopbreed::coopbreed(paths = param_combi[i,1], n_gener =  param_combi[i,2], n_patches =  param_combi[i,3],
MutStep = param_combi[i,4], n_mates = param_combi[i,5],
n_off = param_combi[i,6], par_c= param_combi[i,7], par_k= param_combi[i,8])
}
# stop cluster, free memory form workers
parallel::stopCluster(cl = cl)
# stop timing
proc.time() - ptm
test1
system.time({
test2 <- coopbreed::coopbreed2(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,
n_off = K, par_c= c, par_k= k)
})
traceplot <- function(results, mean, se){
par(mfrow = c(3,3), mar = c(1,1,1,1), oma = c(2,2,2,2))
#par(mfrow = c(1,1))
plot(1:T, 1-results[[1]][1,], type = "l", ylim = c(0, 1), col = "grey", xaxt = "n",
main = names(results)[1], cex.main = 1)
for(i in 1:nrow(results[[1]])) lines(1:T, 1-results[[1]][i,], col = "grey")
lines(1:T, 1-mean[[1]], col = "red")
lines(1:T, 1-mean[[1]] + 1.96 * se[[1]], lty = 2, col = "red")
lines(1:T, 1-mean[[1]] - 1.96 * se[[1]], lty = 2, col = "red")
for(i in 2:length(results)){
plot(1:T, 1-results[[i]][1,], type = "l", ylim = c(0, 1), col = "grey", xaxt = "n",
main = names(results)[i], cex.main = 1)
for(j in 1:nrow(results[[1]])) lines(1:T, 1-results[[i]][j,], col = "grey")
lines(1:T, 1-mean[[i]], col = "red")
lines(1:T, 1-mean[[i]] + 1.96 * se[[i]], lty = 2, col = "red")
lines(1:T, 1-mean[[i]] - 1.96 * se[[i]], lty = 2, col = "red")
}
}
MeanPath_list1 = lapply(test1, mean_fun)
mean_fun <- function(x) apply(x, 2, mean)
SE_fun <- function(x) sqrt(apply(x, 2, var)/Paths)
MeanPath_list1 = lapply(test1, mean_fun)
SE_list1 = lapply(test1, SE_fun)
MeanPath_list2 = lapply(test2, mean_fun)
SE_list2 = lapply(test2, SE_fun)
traceplot(test1, MeanPath_list1, SE_list1)
traceplot(test2, MeanPath_list2, SE_list2)
plotLeggett <- function(equi, equi_se, par_c, par_k){
par(mfrow = c(2,3))
par(mar = c(1,1,1,1), oma = c(4,4,4,4))
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
for(i in 1:length(par_k)){
for(ii in 1:length(par_c)){
plot(M, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])], ylim = c(0,1),
ylab = "", xlab = "", pch = "x", type = "b",
xaxt = "n", yaxt = "n", cex = 1.5)
lines(M, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]
+ 1.96 * equi_se[which(param_combi[,4] == par_k[i] & param_combi[,3] == par_c[ii])],
ylim = c(0,1),
lty = 2, cex = 1.5)
lines(M, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]
- 1.96 * equi_se[which(param_combi[,8] == par_k[i] & param_combi[,4] == par_c[ii])],
ylim = c(0,1),
lty = 2, cex = 1.5)
if(i == 1){
mtext(paste("c = ", par_c[ii]), outer = F, line = 1)
}
if(i == 2){
axis(1)
mtext("M", side = 1, outer = F, line = 2, cex = 0.7)
}
if(ii == 1){
axis(2, las = 2)
mtext("helping, 1 - d*", side = 2, outer = F, line = 2, cex = 0.7)
}
if(ii == 3){
mtext(paste("k = ", par_k[i]), side = 4, outer = F, cex = 1, line = 1)
}
}
}
}
equi1 <- 1-sapply(MeanPath_list1, FUN = function(x) return(x[T]))
equi_se1 <- sapply(SE_list1, FUN = function(x) return(x[T]))
plotLeggett(equi1, equi_se1, c, k)
param_combi[,7]
par_c[ii]
c[ii]
M
plotLeggett <- function(equi, equi_se, par_c, par_k, n_mates){
par(mfrow = c(2,3))
par(mar = c(1,1,1,1), oma = c(4,4,4,4))
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
for(i in 1:length(par_k)){
for(ii in 1:length(par_c)){
plot(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])], ylim = c(0,1),
ylab = "", xlab = "", pch = "x", type = "b",
xaxt = "n", yaxt = "n", cex = 1.5)
lines(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]
+ 1.96 * equi_se[which(param_combi[,4] == par_k[i] & param_combi[,3] == par_c[ii])],
ylim = c(0,1),
lty = 2, cex = 1.5)
lines(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]
- 1.96 * equi_se[which(param_combi[,8] == par_k[i] & param_combi[,4] == par_c[ii])],
ylim = c(0,1),
lty = 2, cex = 1.5)
if(i == 1){
mtext(paste("c = ", par_c[ii]), outer = F, line = 1)
}
if(i == 2){
axis(1)
mtext("M", side = 1, outer = F, line = 2, cex = 0.7)
}
if(ii == 1){
axis(2, las = 2)
mtext("helping, 1 - d*", side = 2, outer = F, line = 2, cex = 0.7)
}
if(ii == 3){
mtext(paste("k = ", par_k[i]), side = 4, outer = F, cex = 1, line = 1)
}
}
}
}
plotLeggett(equi1, equi_se1, c, k)
M
plotLeggett(equi1, equi_se1, c, k, M)
equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]
equi1
equi_se1
equi = equi1
equi_se = equi_se1
plot(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])], ylim = c(0,1),
ylab = "", xlab = "", pch = "x", type = "b",
xaxt = "n", yaxt = "n", cex = 1.5)
n_mates = M
plot(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])], ylim = c(0,1),
ylab = "", xlab = "", pch = "x", type = "b",
xaxt = "n", yaxt = "n", cex = 1.5)
plotLeggett <- function(equi, equi_se, par_c, par_k, n_mates){
par(mfrow = c(2,3))
par(mar = c(1,1,1,1), oma = c(4,4,4,4))
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
for(i in 1:length(par_k)){
for(ii in 1:length(par_c)){
plot(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])], ylim = c(0,1),
ylab = "", xlab = "", pch = "x", type = "b",
xaxt = "n", yaxt = "n", cex = 1.5)
lines(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]
+ 1.96 * equi_se[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])],
ylim = c(0,1),
lty = 2, cex = 1.5)
lines(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]
- 1.96 * equi_se[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])],
ylim = c(0,1),
lty = 2, cex = 1.5)
if(i == 1){
mtext(paste("c = ", par_c[ii]), outer = F, line = 1)
}
if(i == 2){
axis(1)
mtext("M", side = 1, outer = F, line = 2, cex = 0.7)
}
if(ii == 1){
axis(2, las = 2)
mtext("helping, 1 - d*", side = 2, outer = F, line = 2, cex = 0.7)
}
if(ii == 3){
mtext(paste("k = ", par_k[i]), side = 4, outer = F, cex = 1, line = 1)
}
}
}
}
plotLeggett(equi1, equi_se1, c, k, M)
plotLeggett(equi2, equi_se2, c, k, M)
equi2 <- 1-sapply(MeanPath_list2, FUN = function(x) return(x[T]))
equi_se2 <- sapply(SE_list2, FUN = function(x) return(x[T]))
plotLeggett(equi2, equi_se2, c, k, M)
install_github('coopbreed','simonpedrobolivar')
library(foreach)
library(doParallel)
library(Rcpp)
library(RcppArmadillo)
library(RcppProgress)
library(devtools)
install_github('coopbreed','simonpedrobolivar')
setwd("/home/simon/Dokumente/ST_cooperative_breeding/R_stuff")
install_github('coopbreed','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed','simonpedrobolivar')
plotLeggett(equi1, equi_se1, c, k, M)
plotLeggett(equi2, equi_se2, c, k, M)
library(coopbreed)
install_github('simonpedrobolivar/coopbreed3','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed3','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed3','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed3','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed3','simonpedrobolivar', force = T)
install_github('simonpedrobolivar/coopbreed3','simonpedrobolivar')
install_github('simonpedrobolivar/coopbreed3','simonpedrobolivar')
coopbreed::Sb(2,3)
test1
plot(1:T, 1-test1[[1]][1,])
plot(1:T, 1-test1[[1]][2,])
plot(1:T, 1-test1[[1]][3,])
plot(1:T, 1-test1[[1]][4,])
plotLeggett(equi1, equi_se1, c, k, M)
traceplot(test1, MeanPath_list1, SE_list1)
plot(1:T, 1-test1[[6]][4,])
plot(1:T, 1-test1[[6]][3,])
plot(1:T, 1-test1[[6]][2,])
plot(1:T, 1-test1[[6]][2,],  ylim = c(0,1))
plot(1:T, 1-test1[[6]][1,],  ylim = c(0,1))
plot(1:T, 1-test1[[6]][3,],  ylim = c(0,1))
Rcpp::sourceCpp('~/Schreibtisch/ad.cpp')
Rcpp::sourceCpp('~/Schreibtisch/ad.cpp')
Rcpp::sourceCpp('~/Schreibtisch/ad.cpp')
