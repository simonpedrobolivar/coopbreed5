{
    "collab_server" : "",
    "contents" : "#include <RcppArmadilloExtensions/sample.h>\n#include <Rcpp.h>\n#include <iostream>\n#include <progress.hpp>\n#include <list>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <RcppParallel.h>\n\n// [[Rcpp::depends(RcppProgress)]]\n// [[Rcpp::depends(RcppArmadillo)]]\n// [[Rcpp::depends(RcppParallel)]]\n\nusing namespace std;\nusing namespace Rcpp;\nusing namespace RcppParallel;\n\n// function for casting integer to string\n#define SSTR( x ) static_cast< std::ostringstream & >( \\\n( std::ostringstream() << std::dec << x ) ).str()\n\n// [[Rcpp::export]]\nNumericVector Sb(NumericVector d, double k){ // breeder survival function\n  int n;\n  n = d.size();\n  NumericVector res(n);\n  for(int i = 0; i < n; i++){\n    res(i) = 1 - exp(-k * (1 - d(i)));\n  }\n  return res;\n}\n\n// [[Rcpp::export]]\ndouble mean_rcpp(NumericVector x){ // mean function\n  int n = x.size();\n  //Size of vector\n  double sum = 0;\n  //Sum value\n  //For loop, note cpp index shift to 0\n  for(int i = 0; i < n; i++){\n    //Shorthand for sum=sum+\n    sum += x[i];\n  }\n  return sum/n;\n  //Obtain and return the Mean\n}\n\n// [[Rcpp::export]]\nRcpp::List coopbreed2(int paths, int n_gener, int n_patches, double MutStep,\n                      NumericVector n_mates_vec, NumericVector n_off_vec,\n                      NumericVector par_c_vec, NumericVector par_k_vec){\n\n\n  int n_simulations = n_mates_vec.size() * n_off_vec.size() * par_c_vec.size() * par_k_vec.size();\n  vector<string> names;\n  Rcpp::List Datalist2;\n  Progress p(n_simulations, TRUE);\n  for(int mates = 0; mates < n_mates_vec.size(); mates++){\n    int n_mates = n_mates_vec(mates);\n    for(int off = 0; off < n_off_vec.size(); off++){\n      int n_off = n_off_vec(off);\n      for(int pc = 0; pc < par_c_vec.size(); pc++){\n        int par_c = par_c_vec(pc);\n        for(int pk = 0; pk < par_k_vec.size(); pk++){\n          int par_k = par_k_vec(pk);\n\n\n          if (Progress::check_abort()) // check if interrupted by user\n            return -1.0;\n\n          // create string for naming the model outcome\n          names.push_back(SSTR(\"n_mates = \" << n_mates_vec(mates) << \"/ n_off = \" << n_off_vec(off)\n                                            << \"/ par_c = \" << par_c_vec(pc) << \"/ par_k = \" << par_k_vec(pk)));\n\n\n          NumericVector n_mates_v(n_mates);\n          for(int n = 0; n < n_mates; n++){\n            n_mates_v(n) = n;\n          }\n\n          NumericVector n_patches_v(n_patches);\n          for(int n = 0; n < n_patches;n++){\n            n_patches_v(n) = n;\n          }\n          NumericVector n_off_v(n_off);\n          for(int n = 0; n < n_off;n++){\n            n_off_v(n) = n;\n          }\n\n          NumericMatrix Data(paths,n_gener); // matrix for storing the results of one model run\n\n          for (int path = 0 ; path < paths; path++) {\n            // Initialize Population\n            NumericMatrix Popn(2,n_patches);\n            Popn(0,_) = runif(n_patches);\n            Popn(1,_) = runif(n_patches);\n            //cout << \"popn: \"; cout << Popn; cout << \" \"; cout << \", \";\n            //one individual per patch\n            //two chromosomes per individual\n\n            //for (int i = 0; i < n_patches; i++){\n            //  Popn(0,i) = R::runif(0,1);\n            //  Popn(1,i) = R::runif(0,1);\n            //\n            //}\n\n            for(int t = 0; t < n_gener; t++){ // for all generations\n              NumericMatrix mates(n_mates, n_patches);// stores index of each mate of each individual\n              NumericVector sample1(n_mates);\n              for(int j = 0; j < n_patches; j++){\n                sample1 = RcppArmadillo::sample(n_patches_v, n_mates, TRUE);\n                for(int jj = 0; jj < n_mates; jj++){\n                  mates(jj,j) = sample1(jj);\n                }\n              }\n\n              double Offspring[n_off][2][n_patches];// stores the genotypes of each off Offspring\n              NumericVector vec = NumericVector::create(0,1);\n\n              for(int i = 0; i < n_patches; i++){\n                NumericVector Fathers(n_off);\n                Fathers = RcppArmadillo::sample(n_mates_v, n_off, TRUE);\n                NumericVector PatContribs(n_off);\n                PatContribs = RcppArmadillo::sample(vec, n_off, TRUE);\n                NumericVector MatContribs(n_off);\n                MatContribs = RcppArmadillo::sample(vec, n_off, TRUE);\n\n                for(int j = 0; j < n_off; j++){ // for all offspring\n                  Offspring[j][0][i] = Popn(PatContribs(j), mates(Fathers(j), i));\n                  Offspring[j][1][i] = Popn(MatContribs(j),i);\n                }\n              }\n\n              NumericMatrix OffspringPhenotype(n_off, n_patches);\n              NumericVector AvgPhenotype(n_patches); // average phenotype per patch\n              NumericVector vec2(2);\n\n              for(int i = 0; i < n_off; i++){\n                for(int j = 0; j < n_patches; j++){\n                  vec2(0) = Offspring[i][0][j];\n                  vec2(1) = Offspring[i][1][j];\n                  OffspringPhenotype(i,j) = mean_rcpp(vec2); // mean of maternal and paternal genes\n                }\n              }\n              for(int i = 0; i < n_patches; i++){\n                AvgPhenotype(i) = mean_rcpp(OffspringPhenotype(_,i));\n              }\n              double GlobalAvgPhenotype = mean_rcpp(AvgPhenotype);\n              NumericVector ProbLocal(n_patches);\n              for(int n = 0; n < n_patches; n++){\n                ProbLocal(n) = (1.0 - AvgPhenotype(n)) / ((par_c * GlobalAvgPhenotype) + (1.0 - AvgPhenotype(n)));//check if results is rigth\n              }\n              NumericVector BreederSurvival = Sb(AvgPhenotype, par_k);\n              NumericMatrix PopnNext(2, n_patches);\n\n\n              for(int i = 0; i < n_patches; i++){ // for all patches\n                double X;\n                X = R::runif(0,1);\n                if(X > BreederSurvival(i)){ // Breeder Dies\n                  double Y;\n                  Y = R::runif(0,1);\n                  int PatchWinner;\n                  int Winner;\n                  if(Y < ProbLocal(i)){\n                    PatchWinner = i;//Winner Comes from Local Patch\n                    NumericVector prob1(n_off);// Local Offspring Compete\n                    for(int n=0; n < n_off; n++){\n                      prob1(n) = 1.0 - OffspringPhenotype(n,PatchWinner);\n                    }\n                    Winner = RcppArmadillo::sample(n_off_v,1,TRUE, prob1)(0);\n                    //cout << \"Winner: \"; cout << Winner; cout << \", \";\n                  }else{\n                    // Patches Compete\n                    PatchWinner = RcppArmadillo::sample(n_patches_v, 1, TRUE, AvgPhenotype)(0);\n                    NumericVector prob2(n_off);\n                    for(int n=0; n < n_off; n++){// Offspring On Winning Patch Compete\n                      prob2(n) = OffspringPhenotype(n,PatchWinner);\n                    }\n                    Winner = RcppArmadillo::sample(n_off_v,1,TRUE, prob2)(0);\n                  }\n\n                  NumericVector WinnersGenes(2);\n                  for(int n = 0; n < 2; n++){// Mutate Winner's Genes\n                    WinnersGenes(n) = Offspring[Winner][n][PatchWinner] + (MutStep * R::rnorm(0,1));\n                    if(WinnersGenes(n) <= 0){\n                      WinnersGenes(n) = MutStep;\n                      //cout << \"winnersgenes: \"; cout << WinnersGenes(n);\n                    }\n                    if(WinnersGenes(n) >= 1.0){\n                      WinnersGenes(n) = 1.0 - MutStep;\n\n                    }\n                  }\n                  PopnNext(_,i) = WinnersGenes;// Update Next Gen Population Array\n                }else{// Breeder Survives\n                  PopnNext(_,i) = Popn(_,i);\n                }\n              }\n              Popn = PopnNext;\n              // Record Data\n              NumericVector mean_perind(n_patches);\n              for(int n = 0; n < n_patches; n++){\n                mean_perind(n) = mean_rcpp(Popn(_,n));\n              }\n              Data(path,t) = mean_rcpp(mean_perind);\n            }\n          }\n          //MeanPath = apply(Data, 2, mean)\n          //  SE=sqrt(apply(Data, 2, var)/paths)\n\n          //return(list(\"Data\" = Data, \"Mean\" = MeanPath, \"SE\" = SE))\n          //return Data;\n          Datalist2.push_back(Data);\n          Datalist2.attr(\"names\") = names;\n          p.increment();\n        }\n\n      }\n    }\n  }\n\n  return Datalist2;\n}\n\n\n\n\n\n\n\n\n\n// [[Rcpp::export]]\nNumericMatrix coopbreed(int paths, int n_gener, int n_patches, double MutStep, int n_mates, int n_off, double par_c, double par_k){\n  //cout << paths;\n  //cout << n_gener;\n  //cout << n_patches;\n  //cout << n_mates;\n  //cout << n_off;\n\n\n  Progress p(paths * n_gener * n_patches, TRUE);\n\n  NumericVector n_mates_v(n_mates);\n  for(int n = 0; n < n_mates; n++){\n    n_mates_v(n) = n;\n  }\n\n  NumericVector n_patches_v(n_patches);\n  for(int n = 0; n < n_patches;n++){\n    n_patches_v(n) = n;\n  }\n  NumericVector n_off_v(n_off);\n  for(int n = 0; n < n_off;n++){\n    n_off_v(n) = n;\n  }\n  NumericMatrix Data(paths,n_gener);\n\n  for (int path = 0 ; path < paths; path++) {\n    // cout << \"Path: \"; cout << path;\n    // Initialize Population\n    NumericMatrix Popn(2,n_patches);\n    for (int i = 0; i < n_patches; i++){\n      Popn(0,i) = R::runif(0,1);\n      Popn(1,i) = R::runif(0,1);\n      //cout << Popn(1,i); cout << \", \";\n      //one individual per patch\n      // two chromosomes per individual\n    }\n\n    //Popn(1,_) = runif(n_patches);\n    //Popn(2,_) = runif(n_patches);\n    for(int t = 0; t < n_gener; t++){ // for all generations\n      //cout << \"Generation: \"; cout << t;\n      NumericMatrix  mates(n_mates, n_patches);// stores index of each mate of each individual\n      //for(int i = 0; i < n_mates; i++){\n      //  for(int j = 0; j < n_patches; j++){\n      //    mates(i,j) = 1; //RcppArmadillo::sample(n_patches_v, 1, TRUE, NumericVector::create());\n      //  }\n\n      //}\n      NumericVector sample1(n_mates);\n      for(int j = 0; j < n_patches; j++){\n        sample1 = RcppArmadillo::sample(n_patches_v, n_mates, TRUE);\n        for(int jj = 0; jj < n_mates; jj++){\n          mates(jj,j) = sample1(jj);\n          //cout << mates(jj,j); cout << \", \";\n        }\n      }\n\n\n      //(n_off,2,n_patches);\n      double Offspring[n_off][2][n_patches];// stores the genotypes of each off Offspring\n      NumericVector vec = NumericVector::create(0,1);\n\n      for(int i = 0; i < n_patches; i++){\n        p.increment();\n        //cout << \"Patch nr. \"; cout << i;\n        NumericVector Fathers(n_off);\n        Fathers = RcppArmadillo::sample(n_mates_v, n_off, TRUE);\n        //cout << Fathers; cout << \", \";\n        NumericVector PatContribs(n_off);\n        PatContribs = RcppArmadillo::sample(vec, n_off, TRUE);\n        NumericVector MatContribs(n_off);\n        MatContribs = RcppArmadillo::sample(vec, n_off, TRUE);\n\n        for(int j = 0; j < n_off; j++){ // for all offspring\n          Offspring[j][0][i] = Popn(PatContribs(j), mates(Fathers(j), i));\n          Offspring[j][1][i] = Popn(MatContribs(j),i);\n          //cout << Offspring[j][0][i]; cout << \", \";\n        }\n      }\n\n      NumericMatrix OffspringPhenotype(n_off, n_patches);\n      NumericVector AvgPhenotype(n_patches);\n      NumericVector vec2(2);\n\n      for(int i = 0; i < n_off; i++){\n        for(int j = 0; j < n_patches; j++){\n          // TODO\n          vec2(0) = Offspring[i][0][j];\n          vec2(1) = Offspring[i][1][j];\n          OffspringPhenotype(i,j) = mean_rcpp(vec2);\n          //cout << OffspringPhenotype(i,j); cout << \", \";\n        }\n      }\n\n      //for(int i = 0; i < n_patches; i++){\n      //  NumericVector patch_vec(n_off);\n      //  for(int ii = 0; ii < n_off; ii++){\n      //    patch_vec(ii) = OffspringPhenotype(ii, i);\n      //  }\n      //  AvgPhenotype(i) = mean_rcpp(patch_vec);\n      //}\n\n      for(int i = 0; i < n_patches; i++){\n        AvgPhenotype(i) = mean_rcpp(OffspringPhenotype(_,i));\n      }\n      double GlobalAvgPhenotype = mean_rcpp(AvgPhenotype);\n      //cout << \"avg = \"; cout << AvgPhenotype;\n      NumericVector ProbLocal(n_patches);\n      for(int n = 0; n < n_patches; n++){\n        ProbLocal(n) = (1 - AvgPhenotype(n))/(par_c * GlobalAvgPhenotype + (1 - AvgPhenotype(n))); //check if results is rigth\n      }\n      NumericVector BreederSurvival = Sb(AvgPhenotype, par_k);\n      //cout << \"breddersurv: \"; cout << BreederSurvival; cout << \", \";\n      NumericMatrix PopnNext(2, n_patches);\n\n\n      for(int i = 0; i < n_patches; i++){ // for all patches\n        //cout << \"Patch: \";cout << i;cout << \"  \";\n        double X;\n        X = R::runif(0,1);\n        if(X > BreederSurvival(i)){ // Breeder Dies\n          double Y;\n          Y = R::runif(0,1);\n          int PatchWinner;\n          int Winner;\n          if(Y < ProbLocal(i)){\n            PatchWinner = i;//Winner Comes from Local Patch\n            NumericVector prob1(n_off);// Local Offspring Compete\n            for(int n=0; n < n_off; n++){\n              prob1(n) = 1.0 - OffspringPhenotype(n,PatchWinner);\n            }\n            Winner = RcppArmadillo::sample(n_off_v,1,TRUE, prob1)(0);\n          }else{\n            PatchWinner = (RcppArmadillo::sample(n_patches_v, 1, TRUE, AvgPhenotype))(0); // Patches Compete\n            NumericVector prob2(n_off);\n            for(int n=0; n < n_off; n++){// Offspring On Winning Patch Compete\n              prob2(n) = OffspringPhenotype(n,PatchWinner);\n            }\n            Winner = RcppArmadillo::sample(n_off_v,1,TRUE, prob2)(0);\n          }\n          NumericVector WinnersGenes(2);\n          for(int n = 0; n < 2; n++){// Mutate Winner's Genes\n            WinnersGenes(n) = Offspring[Winner][n][PatchWinner] + (MutStep * R::rnorm(0,1));\n            if(WinnersGenes(n) <= 0){\n              WinnersGenes(n) = MutStep;\n            }\n            if(WinnersGenes(n) >= 1){\n              WinnersGenes(n) = 1 - MutStep;\n            }\n          }\n          PopnNext(_,i) = WinnersGenes;// Update Next Gen Population Array\n        }else{// Breeder Survives\n          PopnNext(_,i) = Popn(_,i);\n        }\n      }\n      Popn = PopnNext;\n      // Record Data\n      NumericVector mean_perind(n_patches);\n      for(int n = 0; n < n_patches; n++){\n        mean_perind(n) = mean_rcpp(Popn(_,n));\n      }\n      Data(path,t) = mean_rcpp(mean_perind);\n\n    }\n  }\n  //MeanPath = apply(Data, 2, mean)\n  //  SE=sqrt(apply(Data, 2, var)/paths)\n\n  //return(list(\"Data\" = Data, \"Mean\" = MeanPath, \"SE\" = SE))\n  return Data;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1491989771049.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "329298455",
    "id" : "A7AA7984",
    "lastKnownWriteTime" : 1492121281,
    "last_content_update" : 1492121281038,
    "path" : "~/Dokumente/ST_cooperative_breeding/R_stuff/coopbreed/src/coopbreed_rcpp.cpp",
    "project_path" : "src/coopbreed_rcpp.cpp",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}