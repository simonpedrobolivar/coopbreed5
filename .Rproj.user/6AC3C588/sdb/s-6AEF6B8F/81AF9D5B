{
    "collab_server" : "",
    "contents" : "library(foreach)\nlibrary(doParallel)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(RcppProgress)\nlibrary(devtools)\n\n##### Functions #####\n\ntraceplot <- function(results, mean, se){\n  par(mfrow = c(3,3), mar = c(1,1,1,1), oma = c(2,2,2,2))\n  #par(mfrow = c(1,1))\n  plot(1:T, 1-results[[1]][1,], type = \"l\", ylim = c(0, 1), col = \"grey\", xaxt = \"n\",\n       main = names(results)[1], cex.main = 1)\n  for(i in 1:nrow(results[[1]])) lines(1:T, 1-results[[1]][i,], col = \"grey\")\n  lines(1:T, 1-mean[[1]], col = \"red\")\n  lines(1:T, 1-mean[[1]] + 1.96 * se[[1]], lty = 2, col = \"red\")\n  lines(1:T, 1-mean[[1]] - 1.96 * se[[1]], lty = 2, col = \"red\")\n\n  for(i in 2:length(results)){\n    plot(1:T, 1-results[[i]][1,], type = \"l\", ylim = c(0, 1), col = \"grey\", xaxt = \"n\",\n         main = names(results)[i], cex.main = 1)\n    for(j in 1:nrow(results[[1]])) lines(1:T, 1-results[[i]][j,], col = \"grey\")\n    lines(1:T, 1-mean[[i]], col = \"red\")\n    lines(1:T, 1-mean[[i]] + 1.96 * se[[i]], lty = 2, col = \"red\")\n    lines(1:T, 1-mean[[i]] - 1.96 * se[[i]], lty = 2, col = \"red\")\n  }\n}\n\nplotLeggett <- function(equi, equi_se, par_c, par_k, n_mates){\n  par(mfrow = c(2,3))\n  par(mar = c(1,1,1,1), oma = c(4,4,4,4))\n  par(tcl = -0.25)\n  par(mgp = c(2, 0.6, 0))\n  for(i in 1:length(par_k)){\n    for(ii in 1:length(par_c)){\n      plot(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])], ylim = c(0,1),\n           ylab = \"\", xlab = \"\", pch = \"x\", type = \"b\",\n           xaxt = \"n\", yaxt = \"n\", cex = 1.5)\n      lines(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]\n            + 1.96 * equi_se[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])],\n            ylim = c(0,1),\n            lty = 2, cex = 1.5)\n      lines(n_mates, equi[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])]\n            - 1.96 * equi_se[which(param_combi[,8] == par_k[i] & param_combi[,7] == par_c[ii])],\n            ylim = c(0,1),\n            lty = 2, cex = 1.5)\n      if(i == 1){\n        mtext(paste(\"c = \", par_c[ii]), outer = F, line = 1)\n      }\n      if(i == 2){\n        axis(1)\n        mtext(\"M\", side = 1, outer = F, line = 2, cex = 0.7)\n      }\n      if(ii == 1){\n        axis(2, las = 2)\n        mtext(\"helping, 1 - d*\", side = 2, outer = F, line = 2, cex = 0.7)\n      }\n      if(ii == 3){\n        mtext(paste(\"k = \", par_k[i]), side = 4, outer = F, cex = 1, line = 1)\n      }\n    }\n  }\n\n}\n\n\n\n#####################\n#### Parameters ################################################################\n#####################\n\nPaths = 1 # number of Paths to simulate\nT = 3000 # number of generations to simulate\nP = 1000 # number of patches\nMutStep = 0.001 # mutation step\nM = seq(1,9,2) # number of mates\nK = 100 # number of offspring\nc = c(0.75, 1, 1.25) # parameter\nk = c(0.5, 1) # parameter\n\nparam_combi <- as.data.frame(matrix(0,\n                                    nrow = length(M) * length(K) * length(c) * length(k), ncol = 8))\ncolnames(param_combi) <- c(\"paths\", \"n_gener\",\"n_patches\", \"MutStep\", \"n_mates\", \"n_off\", \"par_c\", \"par_k\")\ncount = 0\nfor(i in 1:length(M)){\n  for(ii in 1:length(K)){\n    for(iii in 1:length(c)){\n      for(iiii in 1:length(k)){\n        count <- count + 1\n        param_combi[count,1] <- Paths\n        param_combi[count,2] <- T\n        param_combi[count,3] <- P\n        param_combi[count,4] <- MutStep\n        param_combi[count,5] <- M[i]\n        param_combi[count,6] <- K[ii]\n        param_combi[count,7] <- c[iii]\n        param_combi[count,8] <- k[iiii]\n      }\n    }\n  }\n}\n\n\n\n#####################\n#### Run the model ################################################################\n#####################\nsystem.time({\n  test2 <- coopbreed::coopbreed2(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,\n                                 n_off = K, par_c= c, par_k= k)\n})\n# time: 58 sec\n\n# start timing\nptm <- proc.time()\n\n# use all cores available, except 1\ncores <- parallel::detectCores() - 1\n\n# set up cluster\ncl <- parallel::makeCluster(cores)\ndoParallel::registerDoParallel(cl)\n\n# start parallelised for-loop\ntest1 <- foreach::foreach(i = 1:nrow(param_combi)) %dopar%{\n  coopbreed::coopbreed(paths = param_combi[i,1], n_gener =  param_combi[i,2], n_patches =  param_combi[i,3],\n                       MutStep = param_combi[i,4], n_mates = param_combi[i,5],\n                       n_off = param_combi[i,6], par_c= param_combi[i,7], par_k= param_combi[i,8])\n}\n\n\n\n# stop cluster, free memory form workers\nparallel::stopCluster(cl = cl)\n\n# stop timing\nproc.time() - ptm\n\n#26.85 sec\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsystem.time({\n  results <- coopbreed2(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,\n                        n_off = K, par_c= c, par_k= k)\n  save(results, file = \"/home/simon/Dokumente/ST_cooperative_breeding/Results1.RData\")\n}) # 54224.28 sec\nresults <- test\n\n\n\n\n# calculate mean and standart error\nmean_fun <- function(x) apply(x, 2, mean)\nSE_fun <- function(x) sqrt(apply(x, 2, var)/Paths)\nMeanPath_list1 = lapply(test1, mean_fun)\nSE_list1 = lapply(test1, SE_fun)\n\nMeanPath_list2 = lapply(test2, mean_fun)\nSE_list2 = lapply(test2, SE_fun)\n\n\n#############################\n#### Plot results ################################################################\n#############################\n\n# plot evolutionary trajectories of each model run\n\n\ntraceplot(test1, MeanPath_list1, SE_list1)\ntraceplot(test2, MeanPath_list2, SE_list2)\n\n\n\n\n# plot from leggett et al.:\n# equi = 1 - d* (mean value for last generation simulated)\nequi1 <- 1-sapply(MeanPath_list1, FUN = function(x) return(x[T]))\nequi_se1 <- sapply(SE_list1, FUN = function(x) return(x[T]))\nequi2 <- 1-sapply(MeanPath_list2, FUN = function(x) return(x[T]))\nequi_se2 <- sapply(SE_list2, FUN = function(x) return(x[T]))\n\n\n\n\nplotLeggett(equi1, equi_se1, c, k, M)\nplotLeggett(equi2, equi_se2, c, k, M)\n\n\n\n\ninstall_github('simonpedrobolivar/coopbreed3','simonpedrobolivar')\n\n\n#########################################\n##### Schmierblatt #############################################\n#########################################\n\n######### create package\nsetwd(\"/home/simon/Dokumente/ST_cooperative_breeding/R_package\")\n\ncreate(\"my1stRpackage\")\nsetwd(\"./my1stRpackage\")\ndocument()\n# back to upper level\nsetwd(\"..\")\n# build the .tar.gz file:\nbuild(\"my1stRpackage\")\n# install on the computer:\ninstall(\"my1stRpackage\")\nmy1stRpackage::afun\n\n\nsetwd(\"/home/simon/Dokumente/ST_cooperative_breeding/R_stuff\")\nRcpp.package.skeleton(\"coopbreed\")\nsetwd(\"./coopbreed\")\nRcpp::compileAttributes()\nsetwd(\"..\")\nbuild(\"coopbreed\")\n\ninstall(\"coopbreed\")\ncoopbreed::test(2,3)\ncoopbreed::rcpp_hello_world(2,3)\ncoopbreed::Sb(2,3)\n\n\n\nsetwd(\"/home/simon/Dokumente/ST_cooperative_breeding/test\")\nRcpp.package.skeleton(\"testpackage\")\nRcpp::compileAttributes(\"testpackage\")\ninstall(\"testpackage\")\ntestpackage::RcppDataFrame()\ntestpackage::RcppDateExample()\ntestpackage::Sb(2,3)\n\n#####################################\n# plot ONE model run:\nsystem.time({\n  res <- coopbreed(paths = Paths, n_gener =  T, n_patches =  P, MutStep = MutStep, n_mates = M,\n                   n_off = K, par_c= c, par_k= k)\n})\nsave(res, file = \"/home/simon/Dokumente/ST_cooperative_breeding/Results_m2_p15_k1.RData\")\n\n# calculate mean and standart error\nMeanPath = apply(res, 2, mean)\nSE=sqrt(apply(res, 2, var)/Paths)\ndim(res)\n\n\n\n\n\n\n\n\nunregister <- function() {\n  env <- foreach:::.foreachGlobals\n  rm(list=ls(name=env), pos=env)\n}\nunregister()\n\n\n\n\n\n\n\n\n\n\n\n\nX <- runif(P)\nY <- runif(P)\nPopnNext <- ifelse(X > BreederSurvival,\n                   # Breeder dies\n                   ifelse(Y < ProbLocal,\n                          #Winner Comes from Local Patch\n                          sample(1:K,1,replace = T, prob = 1-t(OffspringPhenotype[,PatchWinner])),\n                          #Winner Comes from Other Patch\n                          sample(1:K,1,replace = T, prob = t(OffspringPhenotype[,PatchWinner]))),\n                   # Breeder survives\n                   ....Todo)\n\n\nmyfun <- function(x){\n  X = runif(1)\n  if(X > BreederSurvival[x]){\n    # Breeder Dies\n    Y=runif(1)\n    #########################################\n    #TODO\n    #ifelse(Y < ProbLocal[i], )\n\n    if(Y < ProbLocal[x]){\n      #Winner Comes from Local Patch\n      PatchWinner=x\n      # Local Offspring Compete\n      Winner=sample(1:K,1,replace = T, prob = 1-t(OffspringPhenotype[,PatchWinner]))\n      ################################\n    }else{\n      # Patches Compete\n      PatchWinner=sample(1:P, 1, replace = T, prob = AvgPhenotype);\n      # Offspring On Winning Patch Compete\n      Winner=sample(1:K,1,replace = T, prob = t(OffspringPhenotype[,PatchWinner]))\n    }\n    WinnersGenes= array(Offspring[Winner, ,PatchWinner], c(1, 2))\n\n    # Mutate Winner's Genes\n    WinnersGenes = WinnersGenes + MutStep * rnorm(2)\n    WinnersGenes[which(WinnersGenes <= 0)] = MutStep\n    WinnersGenes[which(WinnersGenes >= 1)] = 1 - MutStep\n    # Update Next Gen Population Array\n    PopnNext[,x] = t(WinnersGenes)\n  }else{\n    # Breeder Survives\n    PopnNext[,x] = Popn[,x]\n  }\n  return(PopnNext)\n\n}\nsapply(1:P,FUN = myfun)\n\n\n",
    "created" : 1491989303258.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "9|41|27|0|\n29|62|64|0|\n",
    "hash" : "2704416256",
    "id" : "81AF9D5B",
    "lastKnownWriteTime" : 1492079717,
    "last_content_update" : 1492079717858,
    "path" : "~/Dokumente/ST_cooperative_breeding/R_stuff/coopbreed/run_RCPPmodel.R",
    "project_path" : "run_RCPPmodel.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}